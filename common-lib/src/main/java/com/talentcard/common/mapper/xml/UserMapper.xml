<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.talentcard.common.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.talentcard.common.pojo.UserPO">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="username" jdbcType="CHAR" property="username" />
    <result column="name" jdbcType="CHAR" property="name" />
    <result column="password" jdbcType="CHAR" property="password" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="dr" jdbcType="TINYINT" property="dr" />
    <result column="extra" jdbcType="CHAR" property="extra" />
    <result column="role_id" jdbcType="BIGINT" property="roleId" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, username, `name`, `password`, create_time, dr, extra, role_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.talentcard.common.pojo.UserPO">
    insert into t_user (user_id, username, `name`, 
      `password`, create_time, dr, 
      extra, role_id)
    values (#{userId,jdbcType=BIGINT}, #{username,jdbcType=CHAR}, #{name,jdbcType=CHAR}, 
      #{password,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{dr,jdbcType=TINYINT},
      #{extra,jdbcType=CHAR}, #{roleId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.talentcard.common.pojo.UserPO">
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="dr != null">
        dr,
      </if>
      <if test="extra != null">
        extra,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=CHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dr != null">
        #{dr,jdbcType=TINYINT},
      </if>
      <if test="extra != null">
        #{extra,jdbcType=CHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.talentcard.common.pojo.UserPO">
    update t_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=CHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=CHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dr != null">
        dr = #{dr,jdbcType=TINYINT},
      </if>
      <if test="extra != null">
        extra = #{extra,jdbcType=CHAR},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.talentcard.common.pojo.UserPO">
    update t_user
    set username = #{username,jdbcType=CHAR},
      `name` = #{name,jdbcType=CHAR},
      `password` = #{password,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      dr = #{dr,jdbcType=TINYINT},
      extra = #{extra,jdbcType=CHAR},
      role_id = #{roleId,jdbcType=BIGINT}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>

  <!--  根据用户名查询当前用户信息-->
  <select id="queryByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_user
    where username = #{username,jdbcType=CHAR} and dr=1
  </select>

  <!--  根据当前用户更改密码-->
  <update id="updatePassword">
    update t_user
    set password = #{newPassword,jdbcType=CHAR}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>

  <insert id="insertUser" parameterType="com.talentcard.common.bo.UserBO">
    insert into t_user (username, `name`,
    `password`, extra, role_id)
    values (#{username,jdbcType=CHAR}, #{name,jdbcType=CHAR},
      #{password,jdbcType=CHAR}, #{extra,jdbcType=CHAR}, #{roleId,jdbcType=BIGINT})
   </insert>
  <!--  根据用户名（唯一）编辑用户信息，更改使用者姓名，角色，备注-->
  <update id="updateByUserName" parameterType="com.talentcard.common.bo.UserBO">
    update t_user
    set `name` = #{name,jdbcType=CHAR},
    extra = #{extra,jdbcType=CHAR},
     role_id = #{roleId,jdbcType=BIGINT}
    where username = #{username,jdbcType=CHAR}
  </update>

  <!--  管理员更改用户密码-->
  <update id="adminUpdatePassword" parameterType="java.lang.String">
    update t_user
    set password = #{password,jdbcType=CHAR}
    where username = #{username,jdbcType=CHAR}
  </update>

  <delete id="deleteUser" parameterType="java.lang.String">
    delete from t_user
    where username = #{username,jdbcType=CHAR}
  </delete>

  <!--  根据用户名和角色id查询用户权限列表-->
  <select id="queryUserRole" parameterType="java.util.Map" resultType="com.talentcard.common.bo.UserRoleBO">
    select u.username, u.name, r.name as roleName, u.extra, group_concat(a.name) as authorityName
    from t_user u
    left join t_role r on u.role_id = r.role_id
    left join t_role_authority ra on r.role_id = ra.role_id
    left join t_authority a on ra.authority_id = a.authority_id
    <where>
      ra.`status`=1 and u.dr=1 and a.`name` in ('userUpdate','userDelete')
      <if test="username != null and username != ''">
        and u.username like '%' #{username} '%'
      </if>
      <if test="roleId != null and roleId != ''">
        and u.role_id =  #{roleId}
      </if>
      group by u.user_id
    </where>
    order by u.create_time asc
  </select>


</mapper>